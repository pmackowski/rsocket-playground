/*
 * Copyright (c) 2011-2019 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Modifications copyright (C) 2019 Paweł Maćkowski
 */

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url "http://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.10',
                  'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11',
                  'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE',
                  'org.junit.platform:junit-platform-gradle-plugin:1.2.0'
    }
}

plugins {
    id 'com.gradle.build-scan' version '2.4.1'
    
    id 'org.asciidoctor.convert' version '1.5.6'
    id 'me.champeau.gradle.jmh' version '0.4.8'
    id 'com.google.protobuf' version '0.8.10'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

ext {
    gradleScriptDir = "${rootProject.projectDir}/gradle"

    rsocketVersion = "1.0.0-RC1"
    reactorExtraVersion = "3.2.2.RELEASE"
    protobufVersion = "3.9.1"
    reactorCoreVersion = "3.2.10.RELEASE"
    reflectionsVersion = "0.9.11"
    picocliVersion = "3.9.6"

    // Logging
    slf4jVersion = '1.7.25'
    logbackVersion = '1.2.3'

    // Testing
    mockitoVersion = '2.23.4'
    junitVersion  = '5.4.2'
    assertjVersion = '3.11.1'

    javadocLinks = ["http://docs.oracle.com/javase/7/docs/api/",
                    "http://docs.oracle.com/javaee/6/api/",
                    "http://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/",
                    "http://projectreactor.io/docs/core/release/api/"] as String[]
}

apply from: "$gradleScriptDir/setup.gradle"
apply from: "$gradleScriptDir/doc.gradle"

configurations.all {
    // check for snapshot updates every time
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configure(allprojects) { project ->
    group = 'io.github.zomky'

    repositories {
        mavenLocal()
        maven { url 'http://repo.spring.io/libs-release' }
        maven { url 'http://repo.spring.io/libs-snapshot' }
        mavenCentral()
        jcenter()
    }

    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'propdeps'
    apply plugin: 'java'

    sourceCompatibility = targetCompatibility = 1.8

    jacoco {
        toolVersion = '0.8.2'
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    [compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:varargs",
                                                             "-Xlint:cast",
                                                             "-Xlint:classfile",
                                                             "-Xlint:dep-ann",
                                                             "-Xlint:divzero",
                                                             "-Xlint:empty",
                                                             "-Xlint:finally",
                                                             "-Xlint:overrides",
                                                             "-Xlint:path",
                                                             "-Xlint:processing",
                                                             "-Xlint:static",
                                                             "-Xlint:try",
                                                             "-Xlint:deprecation",
                                                             "-Xlint:unchecked",
                                                             "-Xlint:-serial",      // intentionally disabled
                                                             "-Xlint:-options",     // intentionally disabled
                                                             "-Xlint:-fallthrough", // intentionally disabled
                                                             "-Xlint:-rawtypes"     // TODO enable and fix warnings
    ]

    dependencies {

        compile 'org.openjdk.jmh:jmh-generator-annprocess:1.21'

        implementation "io.rsocket:rsocket-core:$rsocketVersion"
        implementation "io.rsocket:rsocket-transport-netty:$rsocketVersion"
        implementation "io.projectreactor.addons:reactor-extra:$reactorExtraVersion"

        compile "com.google.protobuf:protobuf-java:$protobufVersion"

        compile "info.picocli:picocli:$picocliVersion"
        compile "org.reflections:reflections:$reflectionsVersion"
        
        // Testing
        testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testCompile "org.junit.jupiter:junit-jupiter-migrationsupport:$junitVersion"
        testCompile "org.junit.jupiter:junit-jupiter-params:$junitVersion"
        testCompile "org.mockito:mockito-junit-jupiter:2.25.1"

        testCompile 'org.awaitility:awaitility:3.1.2'
        testCompile "io.projectreactor:reactor-test:$reactorCoreVersion"
        testCompile "org.mockito:mockito-core:$mockitoVersion"
        testCompile "org.assertj:assertj-core:$assertjVersion"
        testRuntime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        implementation "ch.qos.logback:logback-classic:$logbackVersion"

        testCompile 'io.projectreactor.tools:blockhound:1.0.0.M4'

    }

    // force test runs even when there are no test changes
    test.outputs.upToDateWhen { false }
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.9.1'
    }

    generatedFilesBaseDir = 'src'

}

configure(rootProject) {
    archivesBaseName = 'zomky'
    description = 'Zomky: Raft & Gossip implementation'

    jar {
        manifest {
            attributes("Automatic-Module-Name": "zomky",
                    "Implementation-Version": version,
                    "Main-Class" :"io.github.zomky.cli.Zomky")
        }
    }

    shadowJar {
        baseName = 'zomky'
        classifier = null
        version = null
    }
    
    test {
        useJUnitPlatform() {
            excludeTags 'integration'
        }

        jacoco {
            destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
            classDumpDir = file("$buildDir/jacoco/classpathdumps")
        }

        failFast = false

        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTest result: ${result.resultType}"
                println "Test summary: ${result.testCount} tests, " +
                        "${result.successfulTestCount} succeeded, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped"
            }
        }
    }

    task integrationTest(type: Test) {
        useJUnitPlatform {
            includeTags 'integration'
        }
        failFast = true

        check.dependsOn it
        shouldRunAfter test
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
        archives docsZip
    }

}

integrationTest.enabled = false

project(':zomky-samples') {
    archivesBaseName = ':zomky-samples'
    description = 'Samples for zomky'
    dependencies {
        compile rootProject
        runtime "ch.qos.logback:logback-classic:$logbackVersion"

        testCompile rootProject.sourceSets.test.output
    }

    task sample(type:JavaExec) {
        main = 'io.github.zomky.samples.SampleRaft'
        classpath = sourceSets.main.runtimeClasspath
    }

    task classpath {
        doLast {
            println sourceSets.main.runtimeClasspath.asPath
        }
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}
